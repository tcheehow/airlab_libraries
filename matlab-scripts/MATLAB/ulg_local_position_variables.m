%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\Chee How\Desktop\Logs\Flight002 (Good)\log003_vehicle_local_position_0.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2017/10/04 11:48:27

clear
close all

%% Initialize variables.
filename = '/home/airlab/airlab_ws/Logs/log003_vehicle_local_position_0.csv';
delimiter = ',';
startRow = 2;

%% Format for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: double (%f)
%	column8: double (%f)
%   column9: double (%f)
%	column10: double (%f)
%   column11: double (%f)
%	column12: double (%f)
%   column13: double (%f)
%	column14: double (%f)
%   column15: double (%f)
%	column16: double (%f)
%   column17: double (%f)
%	column18: double (%f)
%   column19: double (%f)
%	column20: double (%f)
%   column21: double (%f)
%	column22: double (%f)
%   column23: double (%f)
%	column24: double (%f)
%   column25: double (%f)
%	column26: double (%f)
%   column27: double (%f)
%	column28: double (%f)
%   column29: double (%f)
%	column30: double (%f)
%   column31: double (%f)
%	column32: double (%f)
%   column33: double (%f)
%	column34: double (%f)
%   column35: double (%f)
%	column36: double (%f)
%   column37: double (%f)
%	column38: double (%f)
%   column39: double (%f)
%	column40: double (%f)
%   column41: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
timestamp = dataArray{:, 1};
% ref_timestamp = dataArray{:, 2};
% ref_lat = dataArray{:, 3};
% ref_lon = dataArray{:, 4};
% surface_bottom_timestamp = dataArray{:, 5};
x = dataArray{:, 6};
y = dataArray{:, 7};
z = dataArray{:, 8};
% delta_xy0 = dataArray{:, 9};
% delta_xy1 = dataArray{:, 10};
% delta_z = dataArray{:, 11};
% vx = dataArray{:, 12};
% vy = dataArray{:, 13};
% vz = dataArray{:, 14};
% z_deriv = dataArray{:, 15};
% delta_vxy0 = dataArray{:, 16};
% delta_vxy1 = dataArray{:, 17};
% delta_vz = dataArray{:, 18};
% ax = dataArray{:, 19};
% ay = dataArray{:, 20};
% az = dataArray{:, 21};
% yaw = dataArray{:, 22};
% ref_alt = dataArray{:, 23};
% dist_bottom = dataArray{:, 24};
% dist_bottom_rate = dataArray{:, 25};
% eph = dataArray{:, 26};
% epv = dataArray{:, 27};
% evh = dataArray{:, 28};
% evv = dataArray{:, 29};
% estimator_type = dataArray{:, 30};
% xy_valid = dataArray{:, 31};
% z_valid = dataArray{:, 32};
% v_xy_valid = dataArray{:, 33};
% v_z_valid = dataArray{:, 34};
% xy_reset_counter = dataArray{:, 35};
% z_reset_counter = dataArray{:, 36};
% vxy_reset_counter = dataArray{:, 37};
% vz_reset_counter = dataArray{:, 38};
% xy_global = dataArray{:, 39};
% z_global = dataArray{:, 40};
% dist_bottom_valid = dataArray{:, 41};

timestart = timestamp(1);
for source_index = 1:length(timestamp)
    timestamp(source_index) = timestamp(source_index) - timestart;
    timestamp(source_index) = timestamp(source_index) * 1E-6;
end

% [timestamp_s,x_s,y_s,z_s,yaw_s,vx_s,vy_s,vz_s,acc_x,acc_y,acc_z] = importfile('/home/airlab/airlab_ws/Logs/log003_vehicle_local_position_setpoint_0.csv',2, 1285);
% timestart_s = timestamp_s(1);
% for source_index = 1:length(timestamp_s)
%     timestamp_s(source_index) = timestamp_s(source_index) - timestart_s;
%     timestamp_s(source_index) = timestamp_s(source_index) * 1E-6;
% end


z = -z;
z = medfilt1(z,10);
z = medfilt1(z,10);
% figure;
% subplot(3,1,1), plot(timestamp, x);
% subplot(3,1,2), plot(timestamp, y);
% subplot(3,1,3), plot(timestamp, z);

figure;
t_start = 786 % ~ 71s into flight
t_stop = 1095 % + 30s
y_setpoint = -0.16;
y = y - y_setpoint;

[Y, Z]      = meshgrid(0:0.1:(t_stop-t_start)/10, 0:1:2);
X           = 2.5 * ones(size(Y));
CO(:,:,1)   = zeros(size(Z));
CO(:,:,2)   = zeros(size(Z));
CO(:,:,3)   = zeros(size(Z));

% left tunnel wall
surf(X,Y,Z,CO,'EdgeColor','none','FaceAlpha',0.5);
hold on;
% right tunnel wall
surf(-X,Y,Z,CO,'EdgeColor','none','FaceAlpha',0.5);

% top tunnel wall
[X1, Y1]      = meshgrid(-2.5:1:2.5, 0:0.1:(t_stop-t_start)/10);
Z1           = 2.0 * ones(size(X1));
CO1(:,:,1)   = zeros(size(Z1));
CO1(:,:,2)   = zeros(size(Z1));
CO1(:,:,3)   = zeros(size(Z1));
surf(X1,Y1,Z1,'EdgeColor','none','FaceAlpha',0.1);

% bottom tunnel wall
Z1          = 0 * ones(size(X1));
CO1(:,:,1)   = (51/255)*ones(size(Z1));
CO1(:,:,2)   = (153/255)*ones(size(Z1));
CO1(:,:,3)   = (255/255)*ones(size(Z1));
surf(X1,Y1,Z1,CO1,'EdgeColor','none','FaceAlpha',1);
xlabel('x (metres)')
ylabel('time (seconds)')
zlabel('altitude (metres)')
% hold off

% 3d tunnel animation
plot3(y(t_start:t_stop), linspace(0,(t_stop-t_start)/10, length(y(t_start:t_stop))), z(t_start:t_stop), '-', 'Color', 'k');
p = plot3(y(t_start), 0, z(t_start),'o','MarkerFaceColor','red'); 

% 2d cross-section animation
% % plot3(y(t_start:t_stop), linspace(0,(t_stop-t_start)/10, length(y(t_start:t_stop))), z(t_start:t_stop), '-', 'Color', 'k');
% p = plot3(y(t_start), 0, z(t_start),'o','MarkerFaceColor','red'); 
% view([0,0])

xlim([-3 3])
% ylim([0 30])
ylim([0 (t_stop-t_start)/10])
zlim([0 2])
axis equal

for i=t_start:t_stop
    p.XData = y(i);
    p.YData = (i-t_start)/10;
    p.ZData = z(i);
    pause(0.1)
    drawnow
% % hold on;
% % plot3(y(i), timestamp(i), z(i), '.');

% % plot3(y(i),(i-t_start)/10,z(i),'o','MarkerFaceColor','red');
% % for j=t_start:i-1
% %     plot3(y(j), (j-t_start)/10, z(j), '.', 'Color', [1 1 1]);
% % end
% xlim([-3 3])
% ylim([0 (t_stop-t_start)/10])
% zlim([0 2])
% axis equal
% % hold on
% pause(0.1)
% % hold off
end

% h_2d = figure();
% for i=t_start:t_stop
%     plot(y(i), z(i), 'o','MarkerFaceColor','red');
%     hold on;
%     plot(linspace(-3,3,100), linspace(0,2,100))
%     xlim([-3 3])
%     % ylim([0 30])
%     ylim([0 2])
%     axis equal
%     pause(0.1)
% end



% for i=t_start:t_stop
%     h = animatedline(y(t_start:i), 0:0.1:((i-t_start)/10) ,z(t_start:i))
%     clearpoints(h)
%     pause(0.1)
%     h = animatedline(y(i+1), (i-t_start+1)/10 ,z(i+1),'Color', 'red', 'Marker', '.', 'MaximumNumPoints', 5)
%     addpoints(h, y(i), (i-t_start)/10, z(i));
%     drawnow
%     plot3(y(i), (i-t_start)/10, z(i), '-', 'Color', 'k');
%    pause(0.1)
% end

%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;